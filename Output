//SCRIPTING
//- Auto-Cards - LewdLeah
//- Story Arc Engine (SAE) - Yi1i1i
//- Narrative Guidance Overhaul - Purplejump
//- Paragraph-Fix - Eliterose
//- Gender Inflection + Symbol Swap - Blå Øjne
//- ReputeX Engine - MillennialJesus (NEW)

// Your "Output" tab should look like this
const modifier = (text) => {
    // Your other output modifier scripts go here (preferred)
    text = ParagraphFix("output", text);
    text = AutoCards("output", onOutput_SAE(text));
    // Your other output modifier scripts go here (alternative)

//DO NOT CHANGE ANYTHING HERE (Exept the conflict & calming word strings if you want to make them better)

const conflictWords = ["attack", "stab", "destroy", "break", "steal", "ruin", "burn", "smash", "sabotage", "disrupt", "vandalize", "overthrow", "assassinate", "plunder", "rob", "ransack", "raid", "hijack", "detonate", "explode", "ignite", "collapse", "demolish", "shatter", "strike", "slap", "obliterate", "annihilate", "corrupt", "infect", "poison", "curse", "hex", "summon", "conjure", "mutate", "provoke", "riot", "revolt", "mutiny", "rebel", "resist", "intimidate", "blackmail", "manipulate", "brainwash", "lie", "cheat", "swindle", "disarm", "fire", "hack", "overload", "flood", "drown", "rot", "dissolve", "slaughter", "terminate", "execute", "drama", "conflict", "evil", "kill", "slay", "defeat", "fight", "doom", "slice", "pain", "dying", "die", "perish", "blood"]

const calmingWords = ["calm", "rest", "relax", "meditate", "sleep", "comfort", "hug", "smile", "forgive", "mend", "repair", "plant", "sing", "dance", "celebrate", "collaborate", "share", "give", "donate", "protect", "shelter", "trust", "hope", "dream", "revive", "eat", "drink", "balance", "cheer", "laugh", "play", "build", "bake", "craft", "cook", "empathize", "apologize", "befriend", "admire", "sympathize", "thank", "appreciate", "cherish", "love", "pet", "respect", "restore", "guide", "teach", "learn", "daydream", "wander", "explore", "discover", "reflect", "happy", "joy", "kind"]

const modifier = (text) => {
  const lowerText = text.toLowerCase()
  const words = lowerText.split(/\s+/)
  let conflictCount = 0
  let calmingCount = 0

  words.forEach(word => {
    const fixedWord = word.replace(/^[^\w]+|[^\w]+$/g, '')
    if (conflictWords.includes(fixedWord)) {
      conflictCount++
    }
    if (calmingWords.includes(fixedWord)) {
      calmingCount++
    }
  })

  if (conflictCount > 0) {
    state.heat += conflictCount * state.modelIncreaseHeatImpact
    if (conflictCount >= state.threshholdModelIncreaseTemperature){
       state.storyTemperature += state.modelIncreaseTemperatureImpact
       log(`Detected ${conflictCount} conflict words (AI). Increasing heat & temperature.`)
    }
    else{
      log(`Detected ${conflictCount} conflict words (AI). Increasing heat.`)
    }
  }
  
  if (calmingCount > 0) {
    state.heat -= calmingCount * state.modelDecreaseHeatImpact
    if (calmingCount >= state.threshholdModelDecreaseTemperature){
       state.storyTemperature -= state.modelDecreaseTemperatureImpact
       log(`Detected ${calmingCount} calming words (AI). Decreasing heat & temperature.`)
    }
    else{
      log(`Detected ${calmingCount} calming words (AI). Decreasing heat.`)
    }
  }

  if (state.storyTemperature > state.trueMaximumTemperature){
    state.storyTemperature = state.trueMaximumTemperature
    log("Temperature over maximum, recalibrating...")
  }

  if (state.storyTemperature <= 0){
    state.storyTemperature = 1
    log("Temperature under minimum, recalibrating...")
  }


  if (state.memory.authorsNote == state.originalAuthorsNote){
    state.memory.authorsNote = state.authorsNoteStorage
  }

  log("Heat: " + state.heat)
  log("Temperature: " + state.storyTemperature)


}

{
  // === World & Personal Reputation Init and DEBUG ===
  initWorldReputation(state);
  initPersonalReputation(state);
  if (typeof output !== "undefined") output.push("[DEBUG] Output Modifier Start");
if (typeof checkHybridJobUnlocks === "undefined") {
  function checkHybridJobUnlocks() {}
}
if (typeof pickHybridReaction === "undefined") {
  function pickHybridReaction() { return ""; }
}

  const worldDelta = state.lastWorldReputationChange || {};
  const personalDelta = state.lastPersonalReputationChange || {};
  const rep = state.reputation || {};
  let changes = [];

  // --- Reputation Change Displays
  const worldChanged = Object.keys(worldDelta).length > 0;
  const personalChanged = Object.keys(personalDelta).length > 0;

  if (typeof output !== "undefined") output.push("[DEBUG] worldDelta: " + JSON.stringify(worldDelta));
  if (typeof output !== "undefined") output.push("[DEBUG] personalDelta: " + JSON.stringify(personalDelta));
  if (typeof output !== "undefined") output.push("[DEBUG] reputation: " + JSON.stringify(rep));

  if (worldChanged) {
    const worldChanges = Object.entries(worldDelta)
      .map(([faction, delta]) => `${faction} ${delta >= 0 ? "+" : ""}${delta}`)
      .join("  ");
    changes.push(`[World Reputation Change] ${worldChanges}`);
    changes.push(`[World Reputation] ${getReputationSummary(state)}`);
    if (typeof output !== "undefined") output.push("[DEBUG] Pushed world rep changes.");
  }

  if (personalChanged) {
    const personalChanges = Object.entries(personalDelta)
      .map(([cat, delta]) => `${cat} ${delta >= 0 ? "+" : ""}${delta}`)
      .join("  ");
    const personalSummary = `[Personal Reputation] 🧡:${rep.Charmer || 0} 🛡️:${rep.Honorable || 0} 🕶️:${rep.Rogue || 0} 👑:${rep.Dominant || 0} 🧎:${rep.Submissive || 0} 🎭:${rep.Prankster || 0} 🔍:${rep.Curious || 0} 👼:${rep.Innocent || 0} 😈:${rep.Mischievous || 0} 💞:${rep.Affectionate || 0} ✊:${rep.Defiant || 0} 🦁:${rep.Brave || 0} 🧠:${rep.Clever || 0} 🤹:${rep.Playful || 0}`;
    changes.push(`[Personal Reputation Change] ${personalChanges}`);
    changes.push(personalSummary);
  }

  state.unlockedJobs = checkJobUnlocks(
    state.reputation,
    state.storyFlags || {},
    state.unlockedJobs || {}
  );
  checkHybridJobUnlocks(state.unlockedJobs, state);

  // --- NPC Reactions ---
  let reactionLine = "";
  const age = (state.ages?.player ?? 0);
  const style = state.narrationStyle || "classic";

// --- Legendary/Unique Reactions (highest priority) ---
if (
  rep.Honorable >= 80 &&
  rep.Dominant >= 80 &&
  rep.Charmer >= 70 &&
  getAgeBracket(age) === "adult"
) {
  reactionLine = pickLine(legendaryLawbringerLines, style);
}
else if (
  rep.Rogue >= 65 &&
  rep.Prankster >= 60 &&
  rep.Clever >= 55 &&
  (getAgeBracket(age) === "youth" || getAgeBracket(age) === "adult")
) {
  reactionLine = pickLine(infamousTricksterLines, style);
}
else if (
  rep.Curious >= 75 &&
  rep.Clever >= 75 &&
  rep.Brave >= 60 &&
  (getAgeBracket(age) === "youth" || getAgeBracket(age) === "adult")
) {
  reactionLine = pickLine(geniusExplorerLines, style);
}
else if (
  rep.Charmer >= 80 &&
  rep.Honorable >= 65 &&
  getAgeBracket(age) === "adult"
) {
  reactionLine = pickLine(patronOfTheArtsLines, style);
}
else if (
  rep.Honorable >= 65 &&
  rep.Clever >= 70 &&
  rep.Dominant >= 60 &&
  getAgeBracket(age) === "adult"
) {
  reactionLine = pickLine(visionaryReformerLines, style);
}
else if (
  rep.Rogue >= 75 &&
  rep.Honorable <= -30 &&
  rep.Clever >= 60 &&
  getAgeBracket(age) === "adult"
) {
  reactionLine = pickLine(poisonerLines, style);
}
else if (
  rep.Charmer >= 90 &&
  rep.Submissive >= 60 &&
  rep.Dominant <= 20 &&
  getAgeBracket(age) === "adult"
) {
  reactionLine = pickLine(courtierLines, style);
}
else if (
  rep.Clever >= 65 &&
  rep.Curious >= 60 &&
  (getAgeBracket(age) === "child" || getAgeBracket(age) === "youth")
) {
  reactionLine = pickLine(childProdigyLines, style);
}
else if (
  rep.Innocent >= 70 &&
  rep.Affectionate >= 70 &&
  getAgeBracket(age) === "child"
) {
  reactionLine = pickLine(saintlyInnocentLines, style);
}

// --- High-Value Pair & Peak Trait Reactions (if none above matched) ---
if (!reactionLine) {
  if (rep.Charmer >= 25 && rep.Honorable >= 26) {
    reactionLine = pickLine(charmerHonorableLines, style);
  }
  else if (rep.Dominant >= 24 && rep.Charmer >= 26) {
    reactionLine = pickLine(dominantCharmerLines, style);
  }
  else if (rep.Clever >= 27 && rep.Honorable >= 27) {
    reactionLine = pickLine(cleverHonorableLines, style);
  }
  else if (rep.Innocent >= 16 && rep.Affectionate >= 26) {
    reactionLine = pickLine(innocentAffectionatePeakLines, style);
  }
  else if (rep.Curious >= 27 && rep.Clever >= 26) {
    reactionLine = pickLine(curiousCleverPeakLines, style);
  }
  else if (rep.Dominant >= 29 && rep.Honorable >= 27) {
    reactionLine = pickLine(sternHonorableLines, style);
  }
  else if (rep.Prankster >= 27 && rep.Playful >= 26) {
    reactionLine = pickLine(pranksterPlayfulLines, style);
  }
  else if (rep.Affectionate >= 14) {
    reactionLine = pickLine(affectionatePeakLines, style);
  }
  else if (rep.Curious >= 16) {
    reactionLine = pickLine(curiousPeakLines, style);
  }
  else if (rep.Dominant >= 15) {
    reactionLine = pickLine(dominantPeakLines, style);
  }
  else if (rep.Charmer >= 19) {
    reactionLine = getCharmerPeakLine(age, style);
  }
  else if (rep.Innocent >= 19) {
    reactionLine = pickLine(innocentPeakLines, style);
  }
}

// --- Base Reputation Pair Reactions (if STILL none matched) ---
if (!reactionLine) {
  if (rep.Charmer >= 6 && rep.Dominant >= 3) {
    reactionLine = pickLine(charmerDominantLines, style);
  }
  else if (rep.Honorable >= 5 && rep.Submissive >= 3) {
    reactionLine = pickLine(honorableSubmissiveLines, style);
  }
  else if (rep.Rogue >= 5 && rep.Prankster >= 3) {
    reactionLine = pickLine(roguePranksterLines, style);
  }
  else if (rep.Curious >= 5 && rep.Clever >= 3) {
    reactionLine = pickLine(curiousCleverLines, style);
  }
  else if (rep.Innocent >= 5 && rep.Affectionate >= 4) {
    reactionLine = pickLine(innocentAffectionateLines, style);
  }
  else if (rep.Mischievous >= 5 && rep.Playful >= 4) {
    reactionLine = pickLine(mischievousPlayfulLines, style);
  }
  else if (rep.Brave >= 5 && rep.Defiant >= 4) {
    reactionLine = pickLine(braveDefiantLines, style);
  }
  else if (rep.Clever >= 5 && rep.Defiant >= 3) {
    reactionLine = pickLine(cleverDefiantLines, style);
  }
  else if (rep.Playful >= 5 && rep.Affectionate >= 3) {
    reactionLine = pickLine(playfulAffectionateLines, style);
  }
}

  // --- Output only if changed since last reaction ---
  if (reactionLine && reactionLine !== state.lastReactionLine) {
    text = `${reactionLine}\n\n${text}`;
    state.lastReactionLine = reactionLine;
  }

  // --- Hybrid Job List to Output ---
  const hybridList = Object.keys(state.hybridJobs || {})
    .map(flag => HYBRID_JOBS.find(h => h.unlockFlag === flag)?.name)
    .filter(Boolean);
  if (hybridList.length) {
    changes.push(`[Hybrid Jobs] ${hybridList.join(", ")}`);
  }

  // --- Example: pick a reaction if Charmer or Prankster went up ---
  let lastChange = state.lastPersonalReputationChange || {};
  let phrase = "";

  if (lastChange.Charmer > 0) {
    phrase = reactionPhrases.Charmer.Positive[
      Math.floor(Math.random() * reactionPhrases.Charmer.Positive.length)
    ];
  }
  else if (lastChange.Prankster > 0) {
    phrase = reactionPhrases.Prankster.Positive[
      Math.floor(Math.random() * reactionPhrases.Prankster.Positive.length)
    ];
  }
  if (phrase) {
    text = insertNPCReaction(text, phrase);
  }

  // --- Clear rep deltas ---
  state.lastWorldReputationChange = {};
  state.lastPersonalReputationChange = {};
  if (typeof output !== "undefined") output.push("[DEBUG] Cleared rep deltas.");

  // --- Apply Auto-Cards ---
  text = AutoCards("output", text); //<==🚨REMOVE IF NOT USING AUTO-CARDS!!🚨
  if (typeof output !== "undefined") output.push("[DEBUG] AutoCards applied.");

  // === Clock/Status Bar ===
  let statusBar = "";
  if (text && text.trim()) {
    let clockString = typeof getClockString === "function"
      ? getClockString()
      : (globalThis.getClockString ? globalThis.getClockString() : "");
    let minutesInfo = "";
    if (typeof state !== "undefined" && state.lastActionMinutes !== undefined) {
      minutesInfo = ` (Action took ${state.lastActionMinutes} minute${state.lastActionMinutes !== 1 ? "s" : ""})`;
    }
    if (clockString) statusBar = `[🕒 ${clockString}]${minutesInfo}\n`;
  }

  // --- Output DEBUG End ---
  if (typeof output !== "undefined") output.push("[DEBUG] Output Modifier End");

  // --- Final output, stacking all pieces in order ---
  let outText = statusBar + text;
  if (changes.length > 0) outText = [outText, ...changes].join("\n\n");

  return { text: outText };
};
    return { text };
};
modifier(text);
